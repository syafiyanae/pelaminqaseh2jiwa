<?php
require 'config.php'; // Include your database connection file
session_start();

if (isset($_GET['InventoryID'])) {
    // Fetch inventory ID from the GET request
    $inventory_id = $_GET['InventoryID'];

    // Prepare the SQL query
    $query = "
        SELECT 
            COALESCE(bd.ItemName, dm.ItemName, p.ItemName) AS ItemName, i.InventoryType, bd.DaisType, i.Price
        FROM inventory i
        LEFT JOIN bridaldais bd ON i.InventoryID = bd.InventoryID
        LEFT JOIN diymaterial dm ON i.InventoryID = dm.InventoryID
        LEFT JOIN photobooth p ON i.InventoryID = p.InventoryID
        WHERE i.InventoryID = ?
    ";

    // Prepare and execute the query
    $stmt = $conn->prepare($query);
    $stmt->bind_param("i", $inventory_id);
    $stmt->execute();
    $result = $stmt->get_result();

    // Check if the item exists
    if ($result->num_rows > 0) {
        // Fetch the item details
        $row = $result->fetch_assoc();
        $rentalItem = $row['ItemName'];
		$rentalType = $row['InventoryType'];
        $inventoryPrice = $row['Price'];
    } else {
        // Redirect back to catalog if no item is found
        echo "<script>
                alert('Product not found.');
                window.location.href = 'Catalog.php';
              </script>";
        exit;
    }
} else {
    // Redirect if InventoryID is not set
    echo "<script>
            alert('No Inventory ID provided.');
            window.location.href = 'Catalog.php';
          </script>";
    exit;
}

// Get the customer ID from the session
// Check if user is logged in
if (!isset($_SESSION['CustomerID'])) {
    // If not logged in, redirect to login page
	echo "<script>
            alert('Please login to make booking.');
            window.location.href = 'Login.php';
          </script>";
    exit();
}else{
$customerID = $_SESSION['CustomerID'];
}

// Fetch customer details
$customerQuery = "SELECT * FROM customer WHERE CustomerID = ?";
if ($stmt = mysqli_prepare($conn, $customerQuery)) {
    mysqli_stmt_bind_param($stmt, 'i', $customerID);
    mysqli_stmt_execute($stmt);
    $result = mysqli_stmt_get_result($stmt);
    if ($result && mysqli_num_rows($result) > 0) {
        $customerData = mysqli_fetch_assoc($result);
    } else {
        die("Customer data not found.");
    }
    mysqli_stmt_close($stmt);
} else {
    die("Error preparing the query.");
}

// Calendar Logic
$month = isset($_GET['month']) ? intval($_GET['month']) : date('m');
$year = isset($_GET['year']) ? intval($_GET['year']) : date('Y');

// Ensure valid month and year
if ($month < 1 || $month > 12) $month = date('m');
if ($year < 1970) $year = date('Y');

// Calculate details for the calendar
$firstDayOfMonth = strtotime("$year-$month-01");
$daysInMonth = date('t', $firstDayOfMonth);
$startDayOfWeek = date('w', $firstDayOfMonth);

// Focus on dates only within the current displayed month
$startOfMonth = date('Y-m-01', $firstDayOfMonth);
$endOfMonth = date('Y-m-t', $firstDayOfMonth);

?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Booking Form</title>
	<link rel="stylesheet" href="styles.css">
	<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <style>
        body {
			background-color: #ffeaf7;
		}
    </style>
</head>
<body>
    <div class="modification-container">
		<div class="calendar-container">
			<h2>1) Choose Booking Dates</h2>
			<h3>Item: <?= htmlspecialchars($rentalItem) ?></h3>
				
			<div class="calendar-header">
				<a href="#" class="previous">&#9664; Previous</a>
				<span></span> <!-- The month and year will be dynamically updated by JavaScript -->
				<a href="#" class="next">Next &#9654;</a>
			</div>
				
			<!-- The calendar grid will be dynamically generated by JavaScript -->
			<div class="calendar"></div>
				
			<!--<button onclick="confirmDate()">Confirm Date</button>-->
		</div>
		
		<section id="booking-modification">
			<div class="modification-details">
						<div id="booking-details">
							<h2>2) Booking Details</h2>
							<form id="booking-info">	
								<input type="hidden" name="bookingID" value="<?php echo htmlspecialchars($bookingID); ?>">
								
								<label for="rental_item">Rental Item:</label>
								<input style="background-color:#D3D3D3" type="text" id="rental_item" name="rental_item" value="<?= htmlspecialchars($rentalItem) ?>" readonly>

								
								<label for="inventory_price">Inventory Price: RM</label>
								<input style="background-color:#D3D3D3" type="text" id="inventory_price" name="inventory_price" value="<?=  htmlspecialchars($inventoryPrice, 2) ?>" readonly>
							
								<label for="customer_name">Customer Name:</label>
								<input style="background-color:#D3D3D3" type="text" id="customer_name" name="customer_name" value="<?= $customerData['CustName'] ?>" readonly>
								
								<label for="customer_phone">Customer Phone Number:</label>
								<input style="background-color:#D3D3D3" type="text" id="customer_phone" name="customer_phone" value="<?= $customerData['CustPhoneNum'] ?>" readonly>
								
								<label for="customer_address">Registered Address:</label>
								<input style="background-color:#D3D3D3" type="text" id="customer_address" name="customer_address" value="<?= $customerData['CustAddress'] ?>" readonly>
								<label for="venue_address">Venue Address:</label>
								<select id="venue_address" name="venue_address" onchange="toggleAddressInput()">
									<option value="registered" id="registered_address" selected>Use Registered Address</option>
									<option value="other" id="custom_address">Enter a Different Address</option>
								</select>

								<!-- Input for New Address -->
								<input style="display: none;" type="text" id="newvenue_address" name="newvenue_address" placeholder="Enter your venue address" value=""/>


							
								<?php
									// Display the photobooth time selection if rental type is 'photobooth'
									if ($rentalType === 'Photobooth') {
										echo '<div id="photobooth-time-selection">
												<h3>Photobooth Rental Time</h3>
												<label for="start-time">Start Time:</label>
												<input type="time" id="start-time" name="start-time">
												<label for="end-time">End Time:</label>
												<input type="time" id="end-time" name="end-time">
												Disclaimer: Price is calculated per hour. With minimum rental of 3 hours. Please proceed to select the date of your booking and the day after.
											  </div>';
									} /*else {
										// Optionally, you could hide other sections or display info specific to other rentals like bridal dais.
										echo '<p>Selected Rental: ' . htmlspecialchars($rentalType) . '</p>';
									}*/
								?>
								
							</form>
							<form id="bookingForm" action="submit_booking.php" method="POST">
								<input type="hidden" name="inventoryID" value="<?= $inventory_id ?>">
								<input type="hidden" name="rentalItem" value="<?= htmlspecialchars($rentalItem) ?>">
								<input type="hidden" name="rentalType" value="<?= htmlspecialchars($rentalType) ?>">
								<input type="hidden" name="rentStartDate" id="rentStartDate">
								<input type="hidden" name="rentEndDate" id="rentEndDate">
								<input type="hidden" name="venueAddress" id="venueAddress">
							</form>

						</div>
				
				<div id="date-address-modify">
					<div id="date-selection">
						<h2>3) Booking Dates</h2>
						<div class="date-field">
							<label for="start-date">Select Booking Date:</label>
							<span id="start-date" class="date-placeholder">Select date from calendar</span>
						</div>
						<div class="date-field">
							<label for="end-date">Select Booking End Date:</label>
							<span id="end-date" class="date-placeholder">Select date from calendar</span>
						</div>
					</div>
					<div id="extrafee-container">
					<h2>4) Booking Price</h2>
					<div id="price-details">
						<p>
							Service Fee: <span id="extra-fee" class="price-placeholder">RM 0.00</span>
						</p>
						<p>
							Booking Total Price: <span id="new-total-price" class="price-placeholder">RM 0.00</span>
						</p>
						<button id="pay-extra-fee-btn" class="cta-button" disabled>Make Booking</button>
					</div>
				</div>
				</div>


			</div>
		</section>
			
		
	</div>

	
	<script>
		let currentMonth = <?= $month ?> - 1; // JavaScript months are 0-based
		let currentYear = <?= $year ?>;
		let selectedStartDate = null;
		let selectedEndDate = null;
		const inventoryID = <?= $inventory_id ?>;

		document.addEventListener("DOMContentLoaded", () => {
			const prevButton = document.querySelector(".calendar-header a.previous");
			const nextButton = document.querySelector(".calendar-header a.next");
			const calendarHeader = document.querySelector(".calendar-header span");
			const calendarContainer = document.querySelector(".calendar");

			// Update calendar when month or year changes
			function updateCalendar(month, year) {
				// Fetch booked dates for this inventory
				fetch(`fetch_booked_dates.php?month=${month + 1}&year=${year}&inventoryID=${inventoryID}`)
					.then(response => response.json())
					.then(bookedDates => {
						// Render the calendar
						renderCalendar(month, year, bookedDates);
					})
					.catch(error => {
						console.error("Error fetching booked dates:", error);
						alert("Failed to load calendar data. Please try again.");
					});
			}

			// Render the calendar for a specific month and year
			function renderCalendar(month, year, bookedDates) {
				// Clear existing calendar content
				calendarContainer.innerHTML = `
					<div>Sun</div>
					<div>Mon</div>
					<div>Tue</div>
					<div>Wed</div>
					<div>Thu</div>
					<div>Fri</div>
					<div>Sat</div>
				`;

				const firstDay = new Date(year, month, 1);
				const lastDay = new Date(year, month + 1, 0); // Last day of the month

				// Add empty slots for days before the first day of the month
				for (let i = 0; i < firstDay.getDay(); i++) {
					const emptyCell = document.createElement("div");
					calendarContainer.appendChild(emptyCell);
				}

				// Add day cells
				for (let day = 1; day <= lastDay.getDate(); day++) {
					const dateStr = `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
					const dayElement = document.createElement("div");
					dayElement.className = "day";
					if (bookedDates.includes(dateStr)) {
						dayElement.classList.add("booked");
					}
					dayElement.dataset.date = dateStr;
					dayElement.textContent = day;
					dayElement.onclick = () => toggleDate(dayElement, dateStr);
					calendarContainer.appendChild(dayElement);
				}

				// Update header
				calendarHeader.textContent = new Date(year, month).toLocaleString("default", {
					month: "long",
					year: "numeric",
				});
			}

			// Navigation logic
			prevButton.addEventListener("click", (event) => {
				event.preventDefault();
				if (currentMonth === 0) {
					currentMonth = 11;
					currentYear--;
				} else {
					currentMonth--;
				}
				updateCalendar(currentMonth, currentYear);
			});

			nextButton.addEventListener("click", (event) => {
				event.preventDefault();
				if (currentMonth === 11) {
					currentMonth = 0;
					currentYear++;
				} else {
					currentMonth++;
				}
				updateCalendar(currentMonth, currentYear);
			});

			// Initial rendering
			updateCalendar(currentMonth, currentYear);
		});

		// Toggle date selection and update placeholders
		// Toggle date selection and update placeholders
		function toggleDate(element, date) {
			
			const selectedDate = element.dataset.date;
			// If the date is booked, do nothing
			if (element.classList.contains('booked')) {
				alert('This date is unavailable. Please select a different date.');
				return;
			}

			
			// First click: Set the start date
					if (!selectedStartDate || (selectedStartDate && selectedEndDate)) {
						selectedStartDate = selectedDate;
						selectedEndDate = null; // Reset the end date
						clearSelections(); // Remove previous selections
						element.classList.add('selected'); // Highlight the selected start date
						updateSelectedDates();
					}
					// Second click: Set the end date if it's after the start date
					else if (!selectedEndDate && new Date(selectedDate) > new Date(selectedStartDate)) {
						selectedEndDate = selectedDate;
						updateSelectedDates();
						highlightRange(); // Highlight the range between start and end dates
					}
					// Third click: Reset both dates
					else {
						selectedStartDate = null;
						selectedEndDate = null;
						clearSelections(); // Clear all highlights
					}

			highlightRange();
			
			// Trigger price calculation
			if (selectedStartDate && selectedEndDate) {
				calculateTotalPrice();
			}
		}

		// Clear previous selections from the calendar
		function clearSelections() {
			// Remove the 'in-range' and 'selected' class from all days
			document.querySelectorAll('.day').forEach(day => {
				day.classList.remove('in-range', 'selected');
			});
		}

		// Highlight the selected range of dates
		function highlightRange() {
			if (selectedStartDate && selectedEndDate) {
				const startDate = new Date(selectedStartDate);
				const endDate = new Date(selectedEndDate);

				// Loop through each day in the selected range and add the 'in-range' class
				for (let date = startDate; date <= endDate; date.setDate(date.getDate() + 1)) {
					const dateStr = date.toISOString().split('T')[0];
					const dayElement = document.querySelector(`.day[data-date="${dateStr}"]`);
					if (dayElement) {
						dayElement.classList.add('in-range');
					}
				}

				// Ensure that the start and end dates are specifically highlighted
				const startDateElement = document.querySelector(`.day[data-date="${selectedStartDate}"]`);
				const endDateElement = document.querySelector(`.day[data-date="${selectedEndDate}"]`);
				if (startDateElement) startDateElement.classList.add('selected');
				if (endDateElement) endDateElement.classList.add('selected');
			}
		}


		// Update the placeholders with the selected start and end dates
		function updateSelectedDates() {
			document.getElementById("start-date").textContent = selectedStartDate || "Not selected";
			document.getElementById("end-date").textContent = selectedEndDate || "Not selected";
			document.getElementById("rentStartDate").value = selectedStartDate || "";
			document.getElementById("rentEndDate").value = selectedEndDate || "";
		}

		// Declare global variables to store extraFee and totalPrice
		let extraFee = 0;
		let totalPrice = 0;
		let invoiceType = 'Deposit';
				
		function calculateTotalPrice() {
			const rentalType = "<?= $rentalType ?>"; // Replace with your actual rental type variable
			const inventoryPrice = "<?= $inventoryPrice ?>";
			const daisType = "<?= $row['DaisType'] ?? '' ?>"; // Optional: For Bridal Dais
			const startDate = selectedStartDate;
			const endDate = selectedEndDate;
			const startTime = document.getElementById('start-time')?.value;
			const endTime = document.getElementById('end-time')?.value;

			const data = {
				rentalType: rentalType,
				daisType: daisType,
				startDate: startDate,
				endDate: endDate,
				startTime: startTime,
				endTime: endTime,
				inventoryPrice: inventoryPrice,
				inventoryID: <?= $inventory_id ?>
			};

			// AJAX request to calculate_booking_price.php
			$.ajax({
				url: "calculate_booking_price.php",
				method: "POST",
				data: data,
				dataType: "json",
				success: function (response) {
					if (response.success) {
									// Update global variables with the response values
									extraFee = response.extraFee;
									totalPrice = response.totalPrice;

									// Update price placeholders
									document.getElementById("extra-fee").textContent = `RM ${extraFee.toFixed(2)}`;
									document.getElementById("new-total-price").textContent = `RM ${totalPrice.toFixed(2)}`;
									document.getElementById("pay-extra-fee-btn").disabled = false;
								} else {
									alert("Failed to calculate price. Please check your input.");
								}
							},
							error: function () {
								alert("An error occurred while calculating the price.");
							},
			});
		}
		
		// Function to toggle the address input form
		function toggleAddressInput() {
			var venueAddressSelect = document.getElementById('venue_address'); // Get the select element
			var newAddressInput = document.getElementById('newvenue_address'); // Get the custom address input

			// Check the selected value and toggle visibility
			if (venueAddressSelect.value === 'other') {
				newAddressInput.style.display = 'block'; // Show the custom address input
			} else {
				newAddressInput.style.display = 'none'; // Hide the custom address input
			}
		}


	//submit Booking
	document.getElementById("pay-extra-fee-btn").addEventListener("click", function () {
		const data = {
			inventoryID: <?= $inventory_id ?>,
			rentalItem: "<?= htmlspecialchars($rentalItem) ?>",
			rentStartDate: selectedStartDate,
			rentEndDate: selectedEndDate,
			bookingTotalPrice : totalPrice,
			venueAddress: document.getElementById("venue_address").value === "other"
				? document.getElementById("newvenue_address").value
				: document.getElementById("customer_address").value,
			rentalType: "<?= htmlspecialchars($rentalType) ?>"
		};

		// AJAX request to insert booking
		$.ajax({
			url: "insert_booking.php",
			method: "POST",
			data: data,
			success: function (response) {
				console.log(response); 
					alert("Booking successful!");
					const bookingID = response.bookingID;
					window.location.href = "Invoice2.php?booking_id=" + bookingID + "&invoice_type=Deposit";
				
			},
			error: function (xhr, status, error) {
				 console.log("Error: ", error);  // Log the error to debug
				alert("Please fill in all required informations. Thank you.");
			},
		});
	});
	

    </script>

</body>
</html>
